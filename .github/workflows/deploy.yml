name: CI/CD - Efficient Pull & Deploy to EC2

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Setup QEMU y Buildx (para multiarch si fuera necesario)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3️⃣ Login a GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 4️⃣ Deploy a EC2 via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJ_DIR="/home/${{ secrets.EC2_USER }}/prueba-infra/infra"
            cd "$PROJ_DIR"

            echo ">>> LOGIN a GHCR en EC2"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo ">>> Detectando servicios del docker-compose"
            services=($(docker-compose -f docker-compose.prod.yml config --services))

            echo ">>> Pull de imágenes (en paralelo, max 4 a la vez)"
            max_parallel=4
            count=0
            for svc in "${services[@]}"; do
              (
                echo "Pull: $svc"
                docker-compose -f docker-compose.prod.yml pull "$svc"
                echo "Pull terminado: $svc"
              ) &
              ((count+=1))
              if [[ $count -ge $max_parallel ]]; then
                wait
                count=0
              fi
            done
            wait

            echo ">>> Levantar servicios (force recreate, pull always)"
            docker-compose -f docker-compose.prod.yml up -d --pull always --force-recreate "${services[@]}"

            echo ">>> Limpieza de imágenes intermedias y dangling (solo >24h)"
            docker image prune -af --filter "until=24h" || true

            echo ">>> Verificación individual de cada servicio"
            for svc in "${services[@]}"; do
              status=$(docker inspect -f '{{.State.Health.Status}}' "${svc}" 2>/dev/null || echo "no-healthcheck")
              echo "Servicio: $svc, estado: $status"
            done

            echo ">>> Deploy completado exitosamente."
