name: CI/CD - Ultra-Efficient Build & Deploy

on:
  push:
    branches: ["main"]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/backend

jobs:
  # ----------------------
  # 1️⃣ Build, Test & Push
  # ----------------------
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python & dependencies
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies & run tests
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r backend/requirements-dev.txt  # <-- Instala deps de dev
          cd backend
          pytest --maxfail=1 --disable-warnings -q

      - name: Set up QEMU & Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push multi-stage image
        run: |
          docker build --target final -t $IMAGE_NAME:latest -f backend/Dockerfile.prod backend
          docker push $IMAGE_NAME:latest

  # ----------------------
  # 2️⃣ Deploy on EC2
  # ----------------------
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            PROJ_DIR="/home/${{ secrets.EC2_USER }}/prueba-infra/infra"
            cd "$PROJ_DIR"

            echo ">>> Login a GHCR en EC2"
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo ">>> Pull de la imagen lista"
            docker pull $IMAGE_NAME:latest

            echo ">>> Levantar backend sin reconstruir"
            docker-compose -f docker-compose.prod.yml up -d --no-build backend

            echo ">>> Limpieza de imágenes intermedias y dangling"
            docker image prune -af --filter "until=24h" || true

            echo ">>> Verificación del backend"
            status=$(docker inspect -f '{{.State.Health.Status}}' backend 2>/dev/null || echo "no-healthcheck")
            echo "Estado backend: $status"

            echo ">>> Deploy completado exitosamente."
