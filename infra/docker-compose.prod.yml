version: "3.8"
services:
  db:
    image: postgres:15
    env_file:
      - ../.env.production
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: always

  backend:
    image: ghcr.io/daviddlv007/infra/backend:latest
    env_file:
      - ../.env.production
    depends_on:
      - db
    volumes:
      - static_volume:/vol/static
      - media_volume:/vol/media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      retries: 3
    restart: always

  frontend:
    image: ghcr.io/daviddlv007/infra/frontend:latest
    restart: always
    # NOTA: no es necesario ejecutar frontend en prod si proxy sirve static desde static_volume.
    # Lo mantenemos por compatibilidad, pero el deploy copia el contenido al volumen.

  proxy:
    image: nginx:stable-alpine
    volumes:
      - ./nginx/conf.d_active:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/ssl-params.conf:/etc/nginx/ssl-params.conf:ro
      - ./nginx/letsencrypt:/var/www/letsencrypt:rw
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/letsencrypt:/var/www/letsencrypt
    entrypoint: /bin/sh -c
    command: >
      "trap exit TERM;
       while :; do
         certbot renew --webroot -w /var/www/letsencrypt --deploy-hook 'nginx -s reload';
         sleep 12h & wait $${!};
       done"
    restart: always

volumes:
  db_data:
    name: db_data
  static_volume:
    name: static_volume
  media_volume:
    name: media_volume
